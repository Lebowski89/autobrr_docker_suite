---

################################
# CLEAN UP
################################

- name: Register omegabrr container
  community.docker.docker_container_info:
    name: '{{ lookup("vars", autobrr_prefix + "_omegabrr_basics_name") }}'
  register: autobrr_omegabrr_existing_container_result

- name: Remove existing omegabrr container
  when: autobrr_omegabrr_existing_container_result.exists
  community.docker.docker_container:
    container_default_behavior: compatibility
    name: '{{ lookup("vars", autobrr_prefix + "_omegabrr_basics_name") }}'
    state: absent
    stop_timeout: 10
  register: remove_autobrr_omegabrr_docker
  retries: 5
  delay: 10
  until: remove_autobrr_omegabrr_docker is succeeded

################################
# APPDATA
################################

- name: Create omegabrr appdata directory
  ansible.builtin.file:
    path: '{{ autobrr_omegabrr_paths_location }}'
    state: directory
    owner: '{{ lookup("vars", autobrr_prefix + "_omegabrr_env_puid") }}'
    group: '{{ lookup("vars", autobrr_prefix + "_omegabrr_env_pgid") }}'
    mode: '0755'

################################
# CONFIG
################################

- name: Check if omegabrr config yaml exists
  ansible.builtin.stat:
    path: '{{ lookup("vars", autobrr_prefix + "_omegabrr_paths_location") }}/config.yaml'
  register: autobrr_omegabrr_config_yaml

- name: Generate API token
  when: not autobrr_omegabrr_config_yaml.stat.exists
  ansible.builtin.set_fact:
    omegabrr_api: '{{ lookup("community.general.random_string", override_all="0123456789abcdef", length=32) }}'

- name: Import config file
  when: not autobrr_omegabrr_config_yaml.stat.exists
  ansible.builtin.template:
    src: '{{ role_path }}/templates/omegabrr_config.yaml.j2'
    dest: '{{ lookup("vars", autobrr_prefix + "_omegabrr_paths_location") }}/config.yaml'
    force: true
    owner: '{{ lookup("vars", autobrr_prefix + "_omegabrr_env_puid") }}'
    group: '{{ lookup("vars", autobrr_prefix + "_omegabrr_env_pgid") }}'
    mode: '0664'

- name: Wait for 'config.yaml' to be created
  ansible.builtin.wait_for:
    path: '{{ lookup("vars", autobrr_prefix + "_omegabrr_paths_location") }}/config.yaml'
    state: present

################################
# CONTAINER
################################

- name: Create omegabrr container
  community.docker.docker_container:
    name: '{{ lookup("vars", autobrr_prefix + "_omegabrr_basics_name") }}'
    image: '{{ lookup("vars", autobrr_prefix + "_omegabrr_basics_image_repo") }}:{{ lookup("vars", autobrr_prefix + "_omegabrr_basics_image_tag") }}'
    networks: 
      - name: '{{ lookup("vars", autobrr_prefix + "_network_backend") }}'
    env:
      PUID: '{{ lookup("vars", autobrr_prefix + "_omegabrr_env_puid") }}'
      PGID: '{{ lookup("vars", autobrr_prefix + "_omegabrr_env_pgid") }}'
      TZ: '{{ lookup("vars", autobrr_prefix + "_omegabrr_env_timezone") }}'
    ports:
      - '{{ lookup("vars", autobrr_prefix + "_omegabrr_ports_host") }}:{{ lookup("vars", autobrr_prefix + "_omegabrr_ports_cont") }}'
    volumes: '{{ lookup("vars", autobrr_prefix + "_omegabrr_binds_config_mapping") }}'
    restart_policy: '{{ lookup("vars", autobrr_prefix + "_omegabrr_basics_restart_policy") }}'