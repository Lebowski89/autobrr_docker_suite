---

- name: Create postgres appdata directory
  ansible.builtin.file:
    path: '{{ postgres_paths_location }}'
    state: directory
    owner: '{{ postgres_env_puid }}'
    group: '{{ postgres_env_pgid }}'
    mode: '0755'

- name: Create postgres keys directory
  ansible.builtin.file:
    path: '{{ postgres_paths_keys_location }}'
    state: directory
    owner: '{{ postgres_env_puid }}'
    group: '{{ postgres_env_pgid }}'
    mode: '0755'

- name: Check if postgres_key.txt exists
  ansible.builtin.stat:
    path: '{{ postgres_paths_keys_location }}/{{ postgres_auth_password_file }}'
  register: postgres_key_txt

- name: Insert postgres password into password file
  when: not postgres_key_txt.stat.exists
  ansible.builtin.lineinfile:
    path: '{{ postgres_paths_keys_location }}/{{ postgres_auth_password_file }}'
    line: '{{ postgres_auth_password }}'
    owner: '{{ postgres_env_puid }}'
    group: '{{ postgres_env_pgid }}'
    mode: '0644'
    create: true

- name: Register postgres network
  community.docker.docker_network_info:
    name: '{{ postgres_network }}'
  register: postgres_network_result

- name: Postgres network builtin fail
  ansible.builtin.fail:
    msg: Postgres network does not exist nor is it enabled. Ensure the Postgres network variables contain valid entries.
  when:
    - not postgres_network_is_enabled
    - not postgres_network_result.exists

- name: Create postgres network
  when: not postgres_network_result.exists
  community.docker.docker_network:
    name: '{{ postgres_network }}'
    driver: '{{ postgres_network_driver }}'
    ipam_config:
      - subnet: '{{ postgres_network_subnet }}'

- name: Register postgres container
  community.docker.docker_container_info:
    name: '{{ postgres_basics_name }}'
  register: postgres_container_result

- name: Create postgres container
  when: not postgres_container_result.exists
  community.docker.docker_container:
    name: '{{ postgres_basics_name }}'
    image: '{{ postgres_basics_image_repo }}:{{ postgres_basics_image_tag }}'
    networks:
      - name: '{{ postgres_network }}'
    env:
      PUID: '{{ postgres_env_puid }}'
      PGID: '{{ postgres_env_pgid }}'
      TZ: '{{ timezone }}'
      POSTGRES_USER: '{{ postgres_auth_user }}'
      POSTGRES_PASSWORD_FILE: '/keys/{{ postgres_auth_password_file }}'
    ports:
      - '{{ postgres_ports_host }}:{{ postgres_ports_cont }}'
    volumes: '{{ postgres_binds }}'
    restart_policy: '{{ postgres_basics_restart_policy }}'

- name: Make sure the postgres container is started
  community.docker.docker_container:
    name: '{{ postgres_basics_name }}'
    state: started
  register: start_postgres_docker
  retries: 5
  delay: 10
  until: start_postgres_docker is succeeded